To create a simple HTML page with JavaScript for uploading a file to a Tomcat server and storing it in a Docker container, you can follow these steps. Note that this example assumes you have a Dockerized Tomcat server running and that you want to handle file uploads using a servlet.

Create a simple HTML page (index.html):
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Upload</title>
</head>
<body>
    <h1>File Upload</h1>
    <form id="uploadForm">
        <label for="fileInput">Select a file:</label>
        <input type="file" id="fileInput" name="fileInput" required>
        <br>
        <button type="button" onclick="uploadFile()">Upload</button>
    </form>

    <script src="upload.js"></script>
</body>
</html>
Create a JavaScript file (upload.js):
javascript
Copy code
function uploadFile() {
    var fileInput = document.getElementById('fileInput');
    var file = fileInput.files[0];

    if (file) {
        var formData = new FormData();
        formData.append('file', file);

        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'http://localhost:8080/your-servlet-url', true);

        xhr.onload = function () {
            if (xhr.status === 200) {
                alert('File uploaded successfully!');
            } else {
                alert('File upload failed. Please try again.');
            }
        };

        xhr.send(formData);
    } else {
        alert('Please select a file before uploading.');
    }
}
Replace 'http://localhost:8080/your-servlet-url' with the actual URL of your servlet that handles file uploads on your Tomcat server.

Deploy a servlet to handle file uploads on your Tomcat server. Create a FileUploadServlet.java:
java
Copy code
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

@WebServlet("/your-servlet-url")
@MultipartConfig
public class FileUploadServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        Collection<Part> parts = request.getParts();
        String uploadDir = "/path/to/your/docker/container/upload/directory";

        for (Part part : parts) {
            String fileName = getFileName(part);
            part.write(uploadDir + File.separator + fileName);
        }

        response.setStatus(HttpServletResponse.SC_OK);
    }

    private String getFileName(Part part) {
        String contentDisposition = part.getHeader("content-disposition");
        String[] tokens = contentDisposition.split(";");
        for (String token : tokens) {
            if (token.trim().startsWith("filename")) {
                return token.substring(token.indexOf('=') + 1).trim().replace("\"", "");
            }
        }
        return "";
    }
}
Make sure to replace "/path/to/your/docker/container/upload/directory" with the actual path in your Docker container where you want to store the uploaded files.

Build your Docker container with the Tomcat server and deploy your servlet.
Make sure to adjust the paths, URLs, and configurations based on your specific setup.
